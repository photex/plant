#!/usr/bin/guile \
--no-auto-compile -e main -s 
!#

;; utilities

(define (curpath p)
  "simply join the path fragment with the current working directory"
  (string-join (list (getcwd) p) "/"))

(define (path-test op p)
  "wraps the test command."
  (equal? 0 (system (string-join
                     (list "test" op (curpath p))))))

(define (file? f)
  "Returns true if 'f' is a valid path to a file."
  (path-test "-f" f))

(define (dir? d)
  "Returns true if 'd' is a valid path to a directory."
  (path-test "-d" d))

;;

(define PROJECT (basename (getenv "PWD")))

(define PLANT_LISP
  (let ((env-val (getenv "PLANT_LISP")))
    (if env-val env-val "sbcl")))

(define NOUSERINIT #f)
(define LOAD #f)
(define EVALSTR #f)
(define SAVE #f)

(cond ((equal? PLANT_LISP "sbcl")
       (begin
         (set! NOUSERINIT "--no-userinit")
         (set! LOAD "--load")
         (set! EVALSTR "--eval")
         (set! SAVE
               (format
                #f
                "'(save-lisp-and-die #P\".plant/~a-~a\" :executable t :purify t)'"
                ;; (string-join (list "'(save-lisp-and-die"
                ;;                    "#P\".plant/~a-~a\""
                ;;                    ":executable t"
                ;;                    ":purify t)'"))
                PLANT_LISP PROJECT))))
      
      ((or (equal? PLANT_LISP "ccl")
           (equal? PLANT_LISP "ccl64"))
       (begin
         (set! NOUSERINIT "-n")
         (set! LOAD "-l")
         (set! EVALSTR "-e")
         (set! SAVE
               (format
                #f
                "'(save-application #P\".plant/~a-~a\" :prepend-kernel t :purify t)'"
                PLANT_LISP PROJECT))))
      
      (#t
       (begin
         (format #t "~a is not currently supported.~%" PLANT_LISP)
         (exit 255))))

;; functions

(define (install-quicklisp options)
  (system "wget http://beta.quicklisp.org/quicklisp.lisp")
  (system (string-join (list PLANT_LISP NOUSERINIT LOAD "quicklisp.lisp"
                             EVALSTR "'(quicklisp-quickstart:install :path #P\".quicklisp/\")'"
                             EVALSTR "'(quit)'")))
  (delete-file "quicklisp.lisp"))

(define (build-lisp options)
  (mkdir ".plant")
  (system (string-join (list PLANT_LISP NOUSERINIT LOAD ".quicklisp/setup.lisp"
                             LOAD "~/.plant/setup.lisp"
                             EVALSTR "'(ql:quickload '\"'\"'(:swank :alexandria))'"
                             EVALSTR SAVE))))

;; commands

(define (init options)
  (install-quicklisp options)
  (build-lisp options))

(define (quickloads options) #f)

(define (run options)
  (system
   (string-join (list
                 (format #f ".plant/~a-~a" PLANT_LISP PROJECT)
                 NOUSERINIT))))

(define (rebuild options) #f)

(define (include options) #f)

(define (help options)
  (format #t "plant init~%")
  (format #t "plant include <git|hg|wget> <url>~%")
  (format #t "plant quickloads <system, system, system, ...>~%")
  (format #t "plant run [-swank] [params]~%")
  (format #t "plant rebuild~%"))

;; entry point

(define (main args)
  "There isn't much here. We just take the command and the options and run."

  ;; we need at least a command
  (when (< (length args) 2)
    (help '())
    (exit 255))  
  
  (let* ((command (cadr args))
         (options (cddr args)))
    ;; dispatch further work to the individual command handlers
    (cond ((equal? command "run") (run options))
          ((equal? command "quickloads") (quickloads options))
          ((equal? command "rebuild") (rebuild options))
          ((equal? command "include") (include options))
          ((equal? command "init") (init options))
          ((equal? command "help") (help options))
          (#t (help options)))))
