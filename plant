#!/usr/bin/guile \
--no-auto-compile -e main -s 
!#

;; utilities

(define (curpath p)
  "simply join the path fragment with the current working directory"
  (string-join (list (getcwd) p) "/"))

(define (path-test op p)
  "wraps the test command."
  (equal? 0 (system (string-join
                     (list "test" op (curpath p))))))

(define (file? f)
  "Returns true if 'f' is a valid path to a file."
  (path-test "-f" f))

(define (dir? d)
  "Returns true if 'd' is a valid path to a directory."
  (path-test "-d" d))

;;

(define PROJECT
  (if (dir? ".plant")
      (system "basename $PWD")
      #f))

(define PLANT_LISP
  (let ((env-val (getenv "PLANT_LISP")))
    (if env-val env-val "sbcl")))

(define NOUSERINIT #f)
(define LOAD #f)
(define EVAL #f)
(define SAVE #f)

(cond ((equal? PLANT_LISP "sbcl")
       (begin
         (set! NOUSERINIT "--no-userinit")
         (set! LOAD "--load")
         (set! EVAL "--eval")
         (set! SAVE
               (format
                #f
                "(save-lisp-and-die #P\".plant/~a-~a\" :executable t :purify t)"
                PLANT_LISP PROJECT))))
      
      ((or (equal? PLANT_LISP "ccl")
           (equal? PLANT_LISP "ccl64"))
       (begin
         (set! NOUSERINIT "-n")
         (set! LOAD "-l")
         (set! EVAL "-e")
         (set! SAVE
               (format
                #f
                "(save-lisp-and-die #P\".plant/~a-~a\" :prepend-kernel t :purify t)"
                PLANT_LISP PROJECT))))
      
      (#t
       (begin
         (write (format #f "~s is not currently supported.~%" PLANT_LISP))
         (exit 1))))

;; commands

(define (new options) #f)

(define (init options) #f)

(define (quickloads options) #f)

(define (run options) #f)

(define (rebuild options) #f)

(define (include options) #f)

(define (help options)
  (write "plant new <project name>")
  (newline)
  (write "plant quickloads <system, system, system, ...>")
  (newline)
  (write "plant run [-swank] [params]")
  (newline)
  (write "plant rebuild")
  (newline)
  (write "plant include <git|hg|wget> <url>")
  (newline)
  (write "plant init")
  (newline))

;; entry point

(define (main args)
  "There isn't much here. We just take the command and the options and run."

  ;; we need at least a command
  (when (< (length args) 2)
    (help '())
    (exit 255))

  (format #t "Project: ~a~%LISP: ~a~%Load: ~a~%Eval: ~a~%Save: ~a~%"
          PROJECT PLANT_LISP
          LOAD EVAL SAVE)
  
  
  (let* ((command (cadr args))
         (options (cddr args)))
    ;; dispatch further work to the individual command handlers
    (cond ((equal? command "run") (run options))
          ((equal? command "quickloads") (quickloads options))
          ((equal? command "rebuild") (rebuild options))
          ((equal? command "include") (include options))
          ((equal? command "init") (init options))
          ((equal? command "new") (new options))
          ((equal? command "help") (help options))
          (#t (help options)))))
